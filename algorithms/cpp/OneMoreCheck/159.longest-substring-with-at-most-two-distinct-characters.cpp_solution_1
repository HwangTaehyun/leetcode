// Given a string s , find the length of the longest substring t  that contains
// at most 2 distinct characters.
//
// Example 1:
//
//
// Input: "eceba"
// Output: 3
// Explanation: t is "ece" which its length is 3.
//
//
// Example 2:
//
//
// Input: "ccaabbb"
// Output: 5
// Explanation: t is "aabbb" which its length is 5.

class Solution {
 private:
  int save = 1;

 public:
  int lengthOfLongestSubstringTwoDistinct(string s) {
    if (s.empty()) {
      return 0;
    }
    int ret = 1;

    for (int i = 0; i < s.length(); i++) {
      char firstChar = s[i];
      char secondChar;
      bool change = false;
      int cnt = 1;
      for (int j = i + 1; j < s.length(); j++) {
        cnt++;
        if (s[j] != firstChar && !change) {
          secondChar = s[j];
          change = true;
        }

        if (s[j] != firstChar && s[j] != secondChar) {
          cnt--;
          break;
        }
      }
      ret = max(ret, cnt);
    }

    return ret;
  }
};
