/* "taehyun" */
#include <algorithm>
#include <functional>
#include <iostream>
#include <set>
#include <string>
#include <unordered_map>

using namespace std;

class Solution {
 private:
 public:
  int lengthOfLongestSubstringTwoDistinct(string s) {
    // Declaring the type of Predicate that accepts 2 pairs and return a bool
    using Comparator = std::function<bool(pair<char, int>, pair<char, int>)>;

    // Defining a lambda function to compare two pairs. It will compare two
    // pairs using second field
    Comparator compFunctor = [](pair<char, int> elem1, pair<char, int> elem2) {
      return elem1.second < elem2.second;
    };

    unordered_map<char, int> hashmap = {};

    int n = s.length();
    int left = 0;
    int right = 0;
    int max_len = 2;

    if (n < 3) {
      return n;
    }

    while (right < n) {
      if (hashmap.size() < 3) {
        hashmap[s[right]] = right;
        right++;
      }
      // hash map size가 3이상일 때, left pointer를 한칸씩 오른쪽으로
      if (hashmap.size() == 3) {
        set<pair<char, int>, Comparator> set(hashmap.begin(), hashmap.end(),
                                             compFunctor);

        int del_idx = set.begin()->second;

        cout << "del_idx: " << del_idx << endl;
        cout << "max_len: " << max_len << endl;
        left = del_idx + 1;

        hashmap.erase(s[del_idx]);
      }

      max_len = max(max_len, right - left);
    }

    return max_len;
  }
};

